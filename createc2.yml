---
- name: Create aws EC2 Instance
  hosts: local
  connection: local
  gather_facts: false
  vars:
    keypair: test1
    instance_type: t2.micro
    image: ami-0767046d1677be5a0
    region: eu-central-1
    count: 2
    security_group: AnSecGroup
    aws_access_key:   #указать ключ юзера с админскими правами на авс
    aws_secret_key:   #указать секретный ключ от того же юзверя

  tasks:
    - name: create a security group with 22,80,8080 ports open to all ethernet
      ec2_group:
        name: "{{ security_group }}"
        description: ansible sec group with ports 22,80,8080 open
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"

    - name: creating new ec2 server
      ec2:
        key_name: "{{ keypair }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        group: "{{ security_group }}"
        region: "{{ region }}"
        instance_tags:
          Name: AnsibleDeploy
          Type: AnsibleEC2
        count: "{{ count }}"
        wait: true
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: ec2 #start creation

    - name: printing all ec2 variables
      debug: var=ec2

    - name: Add new instance Staging to host group
      add_host:
        name: "{{ ec2.instances[0].public_ip }}"
        groups: staging
        ansible_ssh_private_key_file: ./keys/test1.pem
    - name: Wait for SSH to come up
      local_action: wait_for
                    host={{ item.public_ip }}
                    port=22
                    state=started
      with_items: "{{ec2.instances}}"

    - name: Add new instance production to host group
      add_host:
        name: "{{ ec2.instances[1].public_ip }}"
        groups: prod
        ansible_ssh_private_key_file: ./keys/test1.pem
    #- name: Wait for SSH to come up
     # local_action: wait_for
      #              host={{ item.public_ip }}
       #             port=22
        #            state=started
      #with_items: "{{ec2.instances[1]}}"


- name: Prepare Staging environment
  hosts: staging
  become: yes
  vars:
    ansible_ssh_user: ubuntu
    ansible_ssh_private_key_file: ./keys/test1.pem
  tasks:
    - name: ensure default JDK package is present
      apt:
       name: default-jdk
       state: present
       update_cache: yes

    - name: ensure git package is present
      apt:
       name: git
       state: present

    - name: install maven
      apt:
       name: maven
       state: present

    - name: clone boxfuse to the vm
      git:
       repo: 'https://github.com/boxfuse/boxfuse-sample-java-war-hello.git'
       dest: /home/ubuntu/boxfuse
       clone: yes

    - name: Build Webapp
      command: mvn -f /home/ubuntu/boxfuse/pom.xml clean package

    - name: upload webapp to S3 bucket
      aws_s3:
        bucket: mybacket13.test13.com
        object: /hello-1.0.war
        src: /home/ubuntu/boxfuse/target/hello-1.0.war
        mode: put
        overwrite: yes

- name: Prepare Production environment
  hosts: prod
  become: yes
  vars:
    ansible_ssh_user: ubuntu
    ansible_ssh_private_key_file: ./keys/test1.pem
  tasks:
    - name: Install default JRE package
      apt:
       name: default-jre
       state: present
       update_cache: yes

    - name: Install TOMCAT9 package
      apt:
       name: tomcat9
       state: present

    - name: Make Sure that TOMCAT service is started
      service:
       name: tomcat9
       state: started

    - name: Ensure Webapp artifact is downloaded from S3 bucket
      aws_s3:
        bucket: mybacket13.test13.com
        object: /hello-1.0.war
        dest: /vars/lib/tomcat9/webapps/hello-1.0.war
        mode: get

    - name: delete object from S3 bucket
      aws_s3:
        bucket: mybacket13.test13.com
        object: /hello-1.0.war
        mode: delobj
